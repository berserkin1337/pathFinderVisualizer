{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/aStar.js","PathfindingVisualizer/PathfindingVisualizer.jsx","algorithms/bfs.js","algorithms/dfs.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","AStar","sortByDistance","distanceToFinishNode","PathfindingVisualizer","getInitialGrid","rowCount","state","ROW_COUNT","colCount","COLUMN_COUNT","initialGrid","currentRow","createNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","Math","abs","isNode","mouseIsPressed","MOBILE_ROW_COUNT","MOBILE_COLUMN_COUNT","isRunning","isStartNode","isFinishNode","isWallNode","currRow","currCol","isDesktopView","handleMouseDown","bind","handleMouseLeave","toggleIsRunning","setState","clearGrid","clearWalls","alert","isGridClear","document","getElementById","newGrid","getNewGridWithWallToggled","nodeClassName","slice","algo","nextNodesStack","currentNode","nextNode","bfs","pop","dfs","nodesInShortestPathOrder","unshift","getNodesInShortestPathOrder","animate","i","setTimeout","animateShortestPath","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onMouseLeave","map","rowIdx","key","nodeIdx","handleMouseEnter","handleMouseUp","onClick","visualize","toggleView","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.459931ca.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    \r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <td\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></td>\r\n    );\r\n  }\r\n}\r\n","// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid); // Q: different from using grid or slice of grid???\r\n\r\n  while (unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (!closestNode.isWall) {\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n","// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function AStar(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid); // Q: different from using grid or slice of grid???\r\n\r\n  while (unvisitedNodes.length) {\r\n    sortByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (!closestNode.isWall) {\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction sortByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1 + neighbor.distanceToFinishNode;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra } from \"../algorithms/dijkstra\";\r\nimport { AStar } from \"../algorithms/aStar\";\r\nimport { dfs } from \"../algorithms/dfs\";\r\nimport { bfs } from \"../algorithms/bfs\";\r\n\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            grid: [],\r\n            START_NODE_ROW: 5,\r\n            FINISH_NODE_ROW: 5,\r\n            START_NODE_COL: 5,\r\n            FINISH_NODE_COL: 15,\r\n            mouseIsPressed: false,\r\n            ROW_COUNT: 25,\r\n            COLUMN_COUNT: 35,\r\n            MOBILE_ROW_COUNT: 10,\r\n            MOBILE_COLUMN_COUNT: 20,\r\n            isRunning: false,\r\n            isStartNode: false,\r\n            isFinishNode: false,\r\n            isWallNode: false, // xxxxxxx\r\n            currRow: 0,\r\n            currCol: 0,\r\n            isDesktopView: true,\r\n        };\r\n\r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n        this.toggleIsRunning = this.toggleIsRunning.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const grid = this.getInitialGrid();\r\n        this.setState({ grid });\r\n    }\r\n\r\n    toggleIsRunning() {\r\n        this.setState({ isRunning: !this.state.isRunning });\r\n    }\r\n\r\n    toggleView() {\r\n        if (!this.state.isRunning) {\r\n            this.clearGrid();\r\n            this.clearWalls();\r\n            const isDesktopView = !this.state.isDesktopView;\r\n            let grid;\r\n            if (isDesktopView) {\r\n                grid = this.getInitialGrid(\r\n                    this.state.ROW_COUNT,\r\n                    this.state.COLUMN_COUNT\r\n                );\r\n                this.setState({ isDesktopView, grid });\r\n            } else {\r\n                if (\r\n                    this.state.START_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\r\n                    this.state.FINISH_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\r\n                    this.state.START_NODE_COL >\r\n                        this.state.MOBILE_COLUMN_COUNT ||\r\n                    this.state.FINISH_NODE_COL > this.state.MOBILE_COLUMN_COUNT\r\n                ) {\r\n                    alert(\r\n                        \"Start & Finish Nodes Must Be within 10 Rows x 20 Columns\"\r\n                    );\r\n                } else {\r\n                    grid = this.getInitialGrid(\r\n                        this.state.MOBILE_ROW_COUNT,\r\n                        this.state.MOBILE_COLUMN_COUNT\r\n                    );\r\n                    this.setState({ isDesktopView, grid });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /******************** Set up the initial grid ********************/\r\n    getInitialGrid = (\r\n        rowCount = this.state.ROW_COUNT,\r\n        colCount = this.state.COLUMN_COUNT\r\n    ) => {\r\n        const initialGrid = [];\r\n        for (let row = 0; row < rowCount; row++) {\r\n            const currentRow = [];\r\n            for (let col = 0; col < colCount; col++) {\r\n                currentRow.push(this.createNode(row, col));\r\n            }\r\n            initialGrid.push(currentRow);\r\n        }\r\n        return initialGrid;\r\n    };\r\n\r\n    createNode = (row, col) => {\r\n        return {\r\n            row,\r\n            col,\r\n            isStart:\r\n                row === this.state.START_NODE_ROW &&\r\n                col === this.state.START_NODE_COL,\r\n            isFinish:\r\n                row === this.state.FINISH_NODE_ROW &&\r\n                col === this.state.FINISH_NODE_COL,\r\n            distance: Infinity,\r\n            distanceToFinishNode:\r\n                Math.abs(this.state.FINISH_NODE_ROW - row) +\r\n                Math.abs(this.state.FINISH_NODE_COL - col),\r\n            isVisited: false,\r\n            isWall: false,\r\n            previousNode: null,\r\n            isNode: true,\r\n        };\r\n    };\r\n\r\n    /******************** Control mouse events ********************/\r\n    handleMouseDown(row, col) {\r\n        if (!this.state.isRunning) {\r\n            if (this.isGridClear()) {\r\n                if (\r\n                    document.getElementById(`node-${row}-${col}`).className ===\r\n                    \"node node-start\"\r\n                ) {\r\n                    this.setState({\r\n                        mouseIsPressed: true,\r\n                        isStartNode: true,\r\n                        currRow: row,\r\n                        currCol: col,\r\n                    });\r\n                } else if (\r\n                    document.getElementById(`node-${row}-${col}`).className ===\r\n                    \"node node-finish\"\r\n                ) {\r\n                    this.setState({\r\n                        mouseIsPressed: true,\r\n                        isFinishNode: true,\r\n                        currRow: row,\r\n                        currCol: col,\r\n                    });\r\n                } else {\r\n                    const newGrid = getNewGridWithWallToggled(\r\n                        this.state.grid,\r\n                        row,\r\n                        col\r\n                    );\r\n                    this.setState({\r\n                        grid: newGrid,\r\n                        mouseIsPressed: true,\r\n                        isWallNode: true,\r\n                        currRow: row,\r\n                        currCol: col,\r\n                    });\r\n                }\r\n            } else {\r\n                this.clearGrid();\r\n            }\r\n        }\r\n    }\r\n\r\n    isGridClear() {\r\n        for (const row of this.state.grid) {\r\n            for (const node of row) {\r\n                const nodeClassName = document.getElementById(\r\n                    `node-${node.row}-${node.col}`\r\n                ).className;\r\n                if (\r\n                    nodeClassName === \"node node-visited\" ||\r\n                    nodeClassName === \"node node-shortest-path\"\r\n                ) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    handleMouseEnter(row, col) {\r\n        if (!this.state.isRunning) {\r\n            if (this.state.mouseIsPressed) {\r\n                const nodeClassName = document.getElementById(\r\n                    `node-${row}-${col}`\r\n                ).className;\r\n                if (this.state.isStartNode) {\r\n                    if (nodeClassName !== \"node node-wall\") {\r\n                        const prevStartNode =\r\n                            this.state.grid[this.state.currRow][\r\n                                this.state.currCol\r\n                            ];\r\n                        prevStartNode.isStart = false;\r\n                        document.getElementById(\r\n                            `node-${this.state.currRow}-${this.state.currCol}`\r\n                        ).className = \"node\";\r\n\r\n                        this.setState({ currRow: row, currCol: col });\r\n                        const currStartNode = this.state.grid[row][col];\r\n                        currStartNode.isStart = true;\r\n                        document.getElementById(\r\n                            `node-${row}-${col}`\r\n                        ).className = \"node node-start\";\r\n                    }\r\n                    this.setState({ START_NODE_ROW: row, START_NODE_COL: col });\r\n                } else if (this.state.isFinishNode) {\r\n                    if (nodeClassName !== \"node node-wall\") {\r\n                        const prevFinishNode =\r\n                            this.state.grid[this.state.currRow][\r\n                                this.state.currCol\r\n                            ];\r\n                        prevFinishNode.isFinish = false;\r\n                        document.getElementById(\r\n                            `node-${this.state.currRow}-${this.state.currCol}`\r\n                        ).className = \"node\";\r\n\r\n                        this.setState({ currRow: row, currCol: col });\r\n                        const currFinishNode = this.state.grid[row][col];\r\n                        currFinishNode.isFinish = true;\r\n                        document.getElementById(\r\n                            `node-${row}-${col}`\r\n                        ).className = \"node node-finish\";\r\n                    }\r\n                    this.setState({\r\n                        FINISH_NODE_ROW: row,\r\n                        FINISH_NODE_COL: col,\r\n                    });\r\n                } else if (this.state.isWallNode) {\r\n                    const newGrid = getNewGridWithWallToggled(\r\n                        this.state.grid,\r\n                        row,\r\n                        col\r\n                    );\r\n                    this.setState({ grid: newGrid });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseUp(row, col) {\r\n        if (!this.state.isRunning) {\r\n            this.setState({ mouseIsPressed: false });\r\n            if (this.state.isStartNode) {\r\n                const isStartNode = !this.state.isStartNode;\r\n                this.setState({\r\n                    isStartNode,\r\n                    START_NODE_ROW: row,\r\n                    START_NODE_COL: col,\r\n                });\r\n            } else if (this.state.isFinishNode) {\r\n                const isFinishNode = !this.state.isFinishNode;\r\n                this.setState({\r\n                    isFinishNode,\r\n                    FINISH_NODE_ROW: row,\r\n                    FINISH_NODE_COL: col,\r\n                });\r\n            }\r\n            this.getInitialGrid();\r\n        }\r\n    }\r\n\r\n    handleMouseLeave() {\r\n        if (this.state.isStartNode) {\r\n            const isStartNode = !this.state.isStartNode;\r\n            this.setState({ isStartNode, mouseIsPressed: false });\r\n        } else if (this.state.isFinishNode) {\r\n            const isFinishNode = !this.state.isFinishNode;\r\n            this.setState({ isFinishNode, mouseIsPressed: false });\r\n        } else if (this.state.isWallNode) {\r\n            const isWallNode = !this.state.isWallNode;\r\n            this.setState({ isWallNode, mouseIsPressed: false });\r\n            this.getInitialGrid();\r\n        }\r\n    }\r\n\r\n    /******************** Clear Board/Walls ********************/\r\n\r\n    clearGrid() {\r\n        if (!this.state.isRunning) {\r\n            const newGrid = this.state.grid.slice();\r\n            for (const row of newGrid) {\r\n                for (const node of row) {\r\n                    let nodeClassName = document.getElementById(\r\n                        `node-${node.row}-${node.col}`\r\n                    ).className;\r\n                    if (\r\n                        nodeClassName !== \"node node-start\" &&\r\n                        nodeClassName !== \"node node-finish\" &&\r\n                        nodeClassName !== \"node node-wall\"\r\n                    ) {\r\n                        document.getElementById(\r\n                            `node-${node.row}-${node.col}`\r\n                        ).className = \"node\";\r\n                        node.isVisited = false;\r\n                        node.distance = Infinity;\r\n                        node.distanceToFinishNode =\r\n                            Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n                            Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n                    }\r\n                    if (nodeClassName === \"node node-finish\") {\r\n                        node.isVisited = false;\r\n                        node.distance = Infinity;\r\n                        node.distanceToFinishNode = 0;\r\n                    }\r\n                    if (nodeClassName === \"node node-start\") {\r\n                        node.isVisited = false;\r\n                        node.distance = Infinity;\r\n                        node.distanceToFinishNode =\r\n                            Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n                            Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n                        node.isStart = true;\r\n                        node.isWall = false;\r\n                        node.previousNode = null;\r\n                        node.isNode = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    clearWalls() {\r\n        if (!this.state.isRunning) {\r\n            const newGrid = this.state.grid.slice();\r\n            for (const row of newGrid) {\r\n                for (const node of row) {\r\n                    let nodeClassName = document.getElementById(\r\n                        `node-${node.row}-${node.col}`\r\n                    ).className;\r\n                    if (nodeClassName === \"node node-wall\") {\r\n                        document.getElementById(\r\n                            `node-${node.row}-${node.col}`\r\n                        ).className = \"node\";\r\n                        node.isWall = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /******************** Create Animations ********************/\r\n    visualize(algo) {\r\n        if (!this.state.isRunning) {\r\n            this.clearGrid();\r\n            this.toggleIsRunning();\r\n            const { grid } = this.state;\r\n            const startNode =\r\n                grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n            const finishNode =\r\n                grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n            let visitedNodesInOrder;\r\n            switch (algo) {\r\n                case \"Dijkstra\":\r\n                    visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n                    break;\r\n                case \"AStar\":\r\n                    visitedNodesInOrder = AStar(grid, startNode, finishNode);\r\n                    break;\r\n                case \"BFS\":\r\n                    visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n                    break;\r\n                case \"DFS\":\r\n                    visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n                    break;\r\n                default:\r\n                    // should never get here\r\n                    break;\r\n            }\r\n            const nodesInShortestPathOrder =\r\n                getNodesInShortestPathOrder(finishNode);\r\n            nodesInShortestPathOrder.push(\"end\");\r\n            this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n        }\r\n    }\r\n\r\n    animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder);\r\n                }, 10 * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                const nodeClassName = document.getElementById(\r\n                    `node-${node.row}-${node.col}`\r\n                ).className;\r\n                if (\r\n                    nodeClassName !== \"node node-start\" &&\r\n                    nodeClassName !== \"node node-finish\"\r\n                ) {\r\n                    document.getElementById(\r\n                        `node-${node.row}-${node.col}`\r\n                    ).className = \"node node-visited\";\r\n                }\r\n            }, 10 * i);\r\n        }\r\n    }\r\n\r\n    /******************** Create path from start to finish ********************/\r\n    animateShortestPath(nodesInShortestPathOrder) {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            if (nodesInShortestPathOrder[i] === \"end\") {\r\n                setTimeout(() => {\r\n                    this.toggleIsRunning();\r\n                }, i * 50);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const node = nodesInShortestPathOrder[i];\r\n                    const nodeClassName = document.getElementById(\r\n                        `node-${node.row}-${node.col}`\r\n                    ).className;\r\n                    if (\r\n                        nodeClassName !== \"node node-start\" &&\r\n                        nodeClassName !== \"node node-finish\"\r\n                    ) {\r\n                        document.getElementById(\r\n                            `node-${node.row}-${node.col}`\r\n                        ).className = \"node node-shortest-path\";\r\n                    }\r\n                }, i * 40);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { grid, mouseIsPressed } = this.state;\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark \">\r\n                    <a className=\"navbar-brand\" href=\"/\">\r\n                        <b>PathFinding Visualizer</b>\r\n                    </a>\r\n                    <button\r\n                        className=\"navbar-toggler\"\r\n                        type=\"button\"\r\n                        data-toggle=\"collapse\"\r\n                        data-target=\"#navbarNav\"\r\n                        aria-controls=\"navbarNav\"\r\n                        aria-expanded=\"false\"\r\n                        aria-label=\"Toggle navigation\"\r\n                    >\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                        <ul className=\"navbar-nav\"></ul>\r\n                    </div>\r\n                </nav>\r\n\r\n                <table\r\n                    className=\"grid-container\"\r\n                    onMouseLeave={() => this.handleMouseLeave()}\r\n                >\r\n                    <tbody className=\"grid\">\r\n                        {grid.map((row, rowIdx) => {\r\n                            return (\r\n                                <tr key={rowIdx}>\r\n                                    {row.map((node, nodeIdx) => {\r\n                                        const {\r\n                                            row,\r\n                                            col,\r\n                                            isFinish,\r\n                                            isStart,\r\n                                            isWall,\r\n                                        } = node;\r\n                                        return (\r\n                                            <Node\r\n                                                key={nodeIdx}\r\n                                                col={col}\r\n                                                isFinish={isFinish}\r\n                                                isStart={isStart}\r\n                                                isWall={isWall}\r\n                                                mouseIsPressed={mouseIsPressed}\r\n                                                onMouseDown={(row, col) =>\r\n                                                    this.handleMouseDown(\r\n                                                        row,\r\n                                                        col\r\n                                                    )\r\n                                                }\r\n                                                onMouseEnter={(row, col) =>\r\n                                                    this.handleMouseEnter(\r\n                                                        row,\r\n                                                        col\r\n                                                    )\r\n                                                }\r\n                                                onMouseUp={() =>\r\n                                                    this.handleMouseUp(row, col)\r\n                                                }\r\n                                                row={row}\r\n                                            ></Node>\r\n                                        );\r\n                                    })}\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-danger\"\r\n                    onClick={() => this.clearGrid()}\r\n                >\r\n                    Clear Grid\r\n                </button>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-warning\"\r\n                    onClick={() => this.clearWalls()}\r\n                >\r\n                    Clear Walls\r\n                </button>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary\"\r\n                    onClick={() => this.visualize(\"Dijkstra\")}\r\n                >\r\n                    Dijkstra's\r\n                </button>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary\"\r\n                    onClick={() => this.visualize(\"AStar\")}\r\n                >\r\n                    A*\r\n                </button>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary\"\r\n                    onClick={() => this.visualize(\"BFS\")}\r\n                >\r\n                    Bread First Search\r\n                </button>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary\"\r\n                    onClick={() => this.visualize(\"DFS\")}\r\n                >\r\n                    Depth First Search\r\n                </button>\r\n                {this.state.isDesktopView ? (\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-light\"\r\n                        onClick={() => this.toggleView()}\r\n                    >\r\n                        Mobile View\r\n                    </button>\r\n                ) : (\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-dark\"\r\n                        onClick={() => this.toggleView()}\r\n                    >\r\n                        Desktop View\r\n                    </button>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/******************** Create Walls ********************/\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n    // mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    if (!node.isStart && !node.isFinish && node.isNode) {\r\n        const newNode = {\r\n            ...node,\r\n            isWall: !node.isWall,\r\n        };\r\n        newGrid[row][col] = newNode;\r\n    }\r\n    return newGrid;\r\n};\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called after the pathfinding methods.\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function bfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  let nextNodesStack = [startNode];\r\n  while (nextNodesStack.length) {\r\n    const currentNode = nextNodesStack.shift();\r\n    if (currentNode === finishNode) return visitedNodesInOrder;\r\n\r\n    if (\r\n      !currentNode.isWall &&\r\n      (currentNode.isStart || !currentNode.isVisited)\r\n    ) {\r\n      currentNode.isVisited = true;\r\n      visitedNodesInOrder.push(currentNode);\r\n      const {col, row} = currentNode;\r\n      let nextNode;\r\n      if (row > 0) {\r\n        nextNode = grid[row - 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (row < grid.length - 1) {\r\n        nextNode = grid[row + 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col > 0) {\r\n        nextNode = grid[row][col - 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col < grid[0].length - 1) {\r\n        nextNode = grid[row][col + 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // return visitedNodesInOrder;\r\n}\r\n","// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function dfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  const nextNodesStack = [];\r\n  nextNodesStack.push(startNode);\r\n  while (nextNodesStack.length) {\r\n    const currentNode = nextNodesStack.pop();\r\n\r\n    if (currentNode === finishNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    if (\r\n      !currentNode.isWall &&\r\n      (currentNode.isStart || !currentNode.isVisited)\r\n    ) {\r\n      currentNode.isVisited = true;\r\n      visitedNodesInOrder.push(currentNode);\r\n\r\n      const {col, row} = currentNode;\r\n      let nextNode;\r\n      if (row > 0) {\r\n        nextNode = grid[row - 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (row < grid.length - 1) {\r\n        nextNode = grid[row + 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col > 0) {\r\n        nextNode = grid[row][col - 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col < grid[0].length - 1) {\r\n        nextNode = grid[row][col + 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathfindingVisualizer></PathfindingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}